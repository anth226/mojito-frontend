import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { login, signupByAgency, signupByBusiness } from './authAPI';

export enum AccountType {
  AGENCY,
  BUSINESS,
  CLIENT,
}

export enum AccountRole {
  AGENCY = 'AGENCY',
  BUSINESS = 'BUSINESS',
  CLIENT = 'CLIENT',
  NOROLE = 'NOROLE',
}

export interface AuthInterface {
  authenticated: boolean;
  userEmail: string;
  role: AccountRole;
}
interface Signup {
  name: string;
  email: string;
  account: number;
}

export interface SignupAgency {
  agencyName: string;
  email: string;
  password: string;
  account: number;
}

export interface SignupBusiness {
  businessName: string;
  email: string;
  password: string;
  account: number;
}

export interface AuthState extends AuthInterface {
  status?: string;
  signup?: Signup | null;
}

const initialState: AuthState = {
  authenticated: false,
  userEmail: '',
  role: AccountRole.NOROLE,
  signup: null,
};

export interface LoginCredentials {
  email: string;
  password: string;
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const loginAsync = createAsyncThunk(
  'auth/login',
  async (credentials: LoginCredentials) => {
    // API Call to to authentication
    const response = await login(credentials);
    return response;
  }
);

export const signupBusinessAsync = createAsyncThunk(
  'auth/signup/business',
  async (businessSignupData: SignupBusiness) => {
    const { account, ...rest } = businessSignupData;

    // API Call to signup account business
    const response = await signupByBusiness(rest);
    return response.data;
  }
);

export const signupAgencyAsync = createAsyncThunk(
  'auth/signup/agency',
  async (agencySignupData: SignupAgency) => {
    const { account, ...rest } = agencySignupData;

    // API Call to signup account agency
    const response = await signupByAgency(rest);
    return response.data;
  }
);

const setSignupData = (data: any) => {
  return {
    name: data?.name,
    email: data?.email,
    account:
      data?.accountType === 'BUSINESS'
        ? 1
        : data?.accountType === 'AGENCY'
        ? 0
        : 2,
  };
};

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearSignup: (state) => {
      state.signup = null;
    },
    logout: (state) => {
      state.authenticated = false;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.authenticated = true;
        const user = action.payload?.user;
        state.userEmail = user?.email;
        state.role = user?.accountType;
      })
      .addCase(loginAsync.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(signupBusinessAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(signupBusinessAsync.fulfilled, (state, action) => {
        const user = action.payload?.registerBusiness?.user;
        state.signup = setSignupData(user);
      })
      .addCase(signupBusinessAsync.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(signupAgencyAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(signupAgencyAsync.fulfilled, (state, action) => {
        const user = action.payload?.registerAgency?.user;
        state.signup = setSignupData(user);
      })
      .addCase(signupAgencyAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { clearSignup, logout } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.auth.value)`
export const getAuthFromStore = (state: RootState) => state.auth;

export default authSlice.reducer;
