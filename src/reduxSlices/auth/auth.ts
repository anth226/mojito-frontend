import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { login } from "./authFakeAPI";

export enum AccountType {
  AGENCY,
  BUSINESS,
}

export enum AccountRole {
  AGENCY = "AGENCY",
  CLIENT = "CLIENT",
  NOROLE = "NOROLE",
}

export interface AuthInterface {
  authenticated: boolean;
  userEmail: string;
  role: AccountRole;
}
interface Signup {
  agency_name: string;
  email: string;
  password: string;
  account: number;
}

export interface AuthState extends AuthInterface {
  status?: string;
  signup?: Signup | null;
}

const initialState: AuthState = {
  authenticated: false,
  userEmail: "",
  role: AccountRole.NOROLE,
  signup: null,
};

export interface LoginCredentials {
  email: string;
  password: string;
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginAsync = createAsyncThunk(
  "auth/login",
  async (credentials: LoginCredentials) => {
    // API Call to to authentication
    const response = await login(credentials);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    signup: (state, payloadWithType) => {
      // console.log('STATE = ',state, 'PAYLOAD =', payloadWithType)
      state.signup = payloadWithType.payload;
    },
    clearSignup: (state)=> {
      state.signup = null
    },
    logout: (state)=> {
      state.authenticated = false
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        return action.payload;
      })
      .addCase(loginAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { signup, clearSignup, logout } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.auth.value)`
export const getAuthFromStore = (state: RootState) => state.auth;

export default authSlice.reducer;
